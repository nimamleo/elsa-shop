stages:
  - api-dev-build
  - api-dev-deploy
  - release
  - prod


dev-build-job:
  stage: api-dev-build
  image: docker:24
  only:
    - develop
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - echo $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID-$PREBUILD
    - docker build -t $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID -f ./docker/prebuild.dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID
    - echo $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID
    - docker build --build-arg CI_PIPELINE_ID=$CI_PIPELINE_ID -t $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID -f ./docker/api-gateway.dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID
  after_script:
    - docker logout $CI_REGISTRY


dev-deploy-job:
  stage: api-dev-deploy
  image: docker:24
  only:
    - develop
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - cd docker/api-gateway
    - echo "$SHOP_ENV" > .env
    - cat .env
    - docker compose -f docker-compose.dev.yaml pull
    - docker compose -f docker-compose.dev.yaml down
    - docker compose -f docker-compose.dev.yaml up -d
  after_script:
    - docker logout $CI_REGISTRY
  tags:
    - tech
